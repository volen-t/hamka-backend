import { entityKind } from './entity.js';
import { SQL, type SQLWrapper } from './sql/index.js';
import { View } from './view.js';
export declare const SubqueryConfig: unique symbol;
export declare class Subquery<TAlias extends string = string, TSelectedFields = unknown> implements SQLWrapper {
    static readonly [entityKind]: string;
    _: {
        brand: 'Subquery';
        selectedFields: TSelectedFields;
        alias: TAlias;
    };
    constructor(sql: SQL, selection: Record<string, unknown>, alias: string, isWith?: boolean);
    getSQL(): SQL<unknown>;
}
export declare class WithSubquery<TAlias extends string = string, TSelection = unknown> extends Subquery<TAlias, TSelection> {
    static readonly [entityKind]: string;
}
export declare class SelectionProxyHandler<T extends Subquery | Record<string, unknown> | View> implements ProxyHandler<Subquery | Record<string, unknown> | View> {
    static readonly [entityKind]: string;
    private config;
    constructor(config: SelectionProxyHandler<T>['config']);
    get(subquery: T, prop: string | symbol): any;
}
