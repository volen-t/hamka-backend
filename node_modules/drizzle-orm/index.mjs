import { e as entityKind } from './alias-e80df77c.mjs';
export { bP as BaseName, p as Column, b4 as ColumnAliasProxyHandler, C as ColumnBuilder, bN as Columns, D as DrizzleError, bR as ExtraConfigBuilder, bz as FakePrimitiveParam, bQ as IsAlias, M as Many, bC as Name, O as One, bO as OriginalName, b as Param, bJ as Placeholder, Q as QueryPromise, bu as Relation, b5 as RelationTableAliasProxyHandler, bv as Relations, S as SQL, bM as Schema, j as SelectionProxyHandler, bB as StringChunk, r as Subquery, u as SubqueryConfig, T as Table, n as TableAliasProxyHandler, bL as TableName, l as TransactionRollbackError, v as View, V as ViewBaseConfig, W as WithSubquery, b6 as aliasedRelation, G as aliasedTable, w as aliasedTableColumn, E as and, H as applyMixins, bs as asc, bm as between, b8 as bindIfParam, by as createMany, bx as createOne, c as createTableRelationsHelpers, bt as desc, F as eq, bk as exists, a as extractTablesRelationalConfig, f as fillPlaceholders, x as getOperators, A as getOrderByOperators, I as getTableColumns, K as getTableLikeName, q as getTableName, bc as gt, bd as gte, b7 as hasOwnEntityKind, bT as iife, bq as ilike, bg as inArray, i as is, bE as isDriverValueEncoder, bj as isNotNull, bi as isNull, bA as isSQLWrapper, bS as isTable, bo as like, be as lt, bf as lte, z as mapColumnsInAliasedSQLToAlias, y as mapColumnsInSQLToAlias, g as mapRelationalRow, m as mapResultRow, d as mapUpdateSet, bD as name, b9 as ne, bF as noopDecoder, bG as noopEncoder, bH as noopMapper, B as normalizeRelation, bb as not, bn as notBetween, bl as notExists, br as notIlike, bh as notInArray, bp as notLike, ba as or, o as orderSelectedFields, bI as param, bK as placeholder, bw as relations, s as sql } from './alias-e80df77c.mjs';
import '@opentelemetry/api';

class ConsoleLogWriter {
    static [entityKind] = 'ConsoleLogWriter';
    write(message) {
        console.log(message);
    }
}
class DefaultLogger {
    static [entityKind] = 'DefaultLogger';
    writer;
    constructor(config) {
        this.writer = config?.writer ?? new ConsoleLogWriter();
    }
    logQuery(query, params) {
        const stringifiedParams = params.map((p) => {
            try {
                return JSON.stringify(p);
            }
            catch {
                return String(p);
            }
        });
        const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';
        this.writer.write(`Query: ${query}${paramsStr}`);
    }
}
class NoopLogger {
    static [entityKind] = 'NoopLogger';
    logQuery() {
        // noop
    }
}

export { ConsoleLogWriter, DefaultLogger, NoopLogger, entityKind };
//# sourceMappingURL=index.mjs.map
