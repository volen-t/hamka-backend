import type { AnyColumn } from './column.js';
import { entityKind } from './entity.js';
import type { SelectedFields } from './operations.js';
import { SQL, type SQLWrapper } from './sql/index.js';
import type { Table } from './table.js';
export declare const ViewBaseConfig: unique symbol;
export type ColumnsSelection = Record<string, unknown>;
export declare abstract class View<TName extends string = string, TExisting extends boolean = boolean, TSelection extends ColumnsSelection = ColumnsSelection> implements SQLWrapper {
    static readonly [entityKind]: string;
    _: {
        brand: 'View';
        viewBrand: string;
        name: TName;
        existing: TExisting;
        selectedFields: TSelection;
    };
    constructor({ name, schema, selectedFields, query }: {
        name: TName;
        schema: string | undefined;
        selectedFields: SelectedFields<AnyColumn, Table>;
        query: SQL | undefined;
    });
    getSQL(): SQL<unknown>;
}
