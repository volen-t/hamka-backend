import type { ColumnBuilderBaseConfig } from '../../column-builder.js';
import type { ColumnBaseConfig } from '../../column.js';
import { entityKind } from '../../entity.js';
import type { AnySQLiteTable } from '../table.js';
import { type Writable } from '../../utils.js';
import { SQLiteColumn, SQLiteColumnBuilder } from './common.js';
export type SQLiteTextBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = SQLiteTextBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'SQLiteText';
    data: TEnum[number];
    driverParam: string;
    enumValues: TEnum;
}>;
export declare class SQLiteTextBuilder<T extends ColumnBuilderBaseConfig<'string', 'SQLiteText'>> extends SQLiteColumnBuilder<T, {
    length: number | undefined;
    enumValues: T['enumValues'];
}> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], config: SQLiteTextConfig<T['enumValues']>);
}
export declare class SQLiteText<T extends ColumnBaseConfig<'string', 'SQLiteText'>> extends SQLiteColumn<T, {
    length: number | undefined;
    enumValues: T['enumValues'];
}> {
    static readonly [entityKind]: string;
    readonly enumValues: T["enumValues"];
    readonly length: number | undefined;
    constructor(table: AnySQLiteTable<{
        name: T['tableName'];
    }>, config: SQLiteTextBuilder<T>['config']);
    getSQLType(): string;
}
export interface SQLiteTextConfig<TEnum extends readonly string[] | string[] | undefined> {
    length?: number;
    enum?: TEnum;
}
export declare function text<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(name: TName, config?: SQLiteTextConfig<T | Writable<T>>): SQLiteTextBuilderInitial<TName, Writable<T>>;
