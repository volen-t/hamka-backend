'use strict';

var index = require('../index-b1dbb7ec.cjs');
var session = require('../session-fadbb086.cjs');
require('@opentelemetry/api');

function alias(table, alias) {
    return new Proxy(table, new index.TableAliasProxyHandler(alias, false));
}

function getTableConfig(table) {
    const columns = Object.values(table[session.SQLiteTable.Symbol.Columns]);
    const indexes = [];
    const checks = [];
    const primaryKeys = [];
    const uniqueConstraints = [];
    const foreignKeys = Object.values(table[session.SQLiteTable.Symbol.InlineForeignKeys]);
    const name = table[index.Table.Symbol.Name];
    const extraConfigBuilder = table[session.SQLiteTable.Symbol.ExtraConfigBuilder];
    if (extraConfigBuilder !== undefined) {
        const extraConfig = extraConfigBuilder(table[session.SQLiteTable.Symbol.Columns]);
        for (const builder of Object.values(extraConfig)) {
            if (index.is(builder, session.IndexBuilder)) {
                indexes.push(builder.build(table));
            }
            else if (index.is(builder, session.CheckBuilder)) {
                checks.push(builder.build(table));
            }
            else if (index.is(builder, session.UniqueConstraintBuilder)) {
                uniqueConstraints.push(builder.build(table));
            }
            else if (index.is(builder, session.PrimaryKeyBuilder)) {
                primaryKeys.push(builder.build(table));
            }
            else if (index.is(builder, session.ForeignKeyBuilder)) {
                foreignKeys.push(builder.build(table));
            }
        }
    }
    return {
        columns,
        indexes,
        foreignKeys,
        checks,
        primaryKeys,
        uniqueConstraints,
        name,
    };
}
function getViewConfig(view) {
    return {
        ...view[index.ViewBaseConfig],
        ...view[session.SQLiteViewConfig],
    };
}

exports.BaseSQLiteDatabase = session.BaseSQLiteDatabase;
exports.Check = session.Check;
exports.CheckBuilder = session.CheckBuilder;
exports.ExecuteResultSync = session.ExecuteResultSync;
exports.ForeignKey = session.ForeignKey;
exports.ForeignKeyBuilder = session.ForeignKeyBuilder;
exports.Index = session.Index;
exports.IndexBuilder = session.IndexBuilder;
exports.IndexBuilderOn = session.IndexBuilderOn;
exports.InlineForeignKeys = session.InlineForeignKeys;
exports.ManualViewBuilder = session.ManualViewBuilder;
exports.PreparedQuery = session.PreparedQuery;
exports.PrimaryKey = session.PrimaryKey;
exports.PrimaryKeyBuilder = session.PrimaryKeyBuilder;
exports.QueryBuilder = session.QueryBuilder;
exports.SQLiteAsyncDialect = session.SQLiteAsyncDialect;
exports.SQLiteBaseInteger = session.SQLiteBaseInteger;
exports.SQLiteBaseIntegerBuilder = session.SQLiteBaseIntegerBuilder;
exports.SQLiteBigInt = session.SQLiteBigInt;
exports.SQLiteBigIntBuilder = session.SQLiteBigIntBuilder;
exports.SQLiteBlobBuffer = session.SQLiteBlobBuffer;
exports.SQLiteBlobBufferBuilder = session.SQLiteBlobBufferBuilder;
exports.SQLiteBlobJson = session.SQLiteBlobJson;
exports.SQLiteBlobJsonBuilder = session.SQLiteBlobJsonBuilder;
exports.SQLiteBoolean = session.SQLiteBoolean;
exports.SQLiteBooleanBuilder = session.SQLiteBooleanBuilder;
exports.SQLiteColumn = session.SQLiteColumn;
exports.SQLiteColumnBuilder = session.SQLiteColumnBuilder;
exports.SQLiteCustomColumn = session.SQLiteCustomColumn;
exports.SQLiteCustomColumnBuilder = session.SQLiteCustomColumnBuilder;
exports.SQLiteDelete = session.SQLiteDelete;
exports.SQLiteDialect = session.SQLiteDialect;
exports.SQLiteInsert = session.SQLiteInsert;
exports.SQLiteInsertBuilder = session.SQLiteInsertBuilder;
exports.SQLiteInteger = session.SQLiteInteger;
exports.SQLiteIntegerBuilder = session.SQLiteIntegerBuilder;
exports.SQLiteNumeric = session.SQLiteNumeric;
exports.SQLiteNumericBuilder = session.SQLiteNumericBuilder;
exports.SQLiteReal = session.SQLiteReal;
exports.SQLiteRealBuilder = session.SQLiteRealBuilder;
exports.SQLiteSelect = session.SQLiteSelect;
exports.SQLiteSelectBuilder = session.SQLiteSelectBuilder;
exports.SQLiteSelectQueryBuilder = session.SQLiteSelectQueryBuilder;
exports.SQLiteSession = session.SQLiteSession;
exports.SQLiteSyncDialect = session.SQLiteSyncDialect;
exports.SQLiteTable = session.SQLiteTable;
exports.SQLiteText = session.SQLiteText;
exports.SQLiteTextBuilder = session.SQLiteTextBuilder;
exports.SQLiteTimestamp = session.SQLiteTimestamp;
exports.SQLiteTimestampBuilder = session.SQLiteTimestampBuilder;
exports.SQLiteTransaction = session.SQLiteTransaction;
exports.SQLiteUpdate = session.SQLiteUpdate;
exports.SQLiteUpdateBuilder = session.SQLiteUpdateBuilder;
exports.SQLiteView = session.SQLiteView;
exports.SQLiteViewBase = session.SQLiteViewBase;
exports.SQLiteViewConfig = session.SQLiteViewConfig;
exports.UniqueConstraint = session.UniqueConstraint;
exports.UniqueConstraintBuilder = session.UniqueConstraintBuilder;
exports.UniqueOnConstraintBuilder = session.UniqueOnConstraintBuilder;
exports.ViewBuilder = session.ViewBuilder;
exports.ViewBuilderCore = session.ViewBuilderCore;
exports.blob = session.blob;
exports.check = session.check;
exports.customType = session.customType;
exports.foreignKey = session.foreignKey;
exports.index = session.index;
exports.int = session.int;
exports.integer = session.integer;
exports.numeric = session.numeric;
exports.primaryKey = session.primaryKey;
exports.real = session.real;
exports.sqliteTable = session.sqliteTable;
exports.sqliteTableCreator = session.sqliteTableCreator;
exports.sqliteView = session.sqliteView;
exports.text = session.text;
exports.unique = session.unique;
exports.uniqueIndex = session.uniqueIndex;
exports.uniqueKeyName = session.uniqueKeyName;
exports.view = session.view;
exports.alias = alias;
exports.getTableConfig = getTableConfig;
exports.getViewConfig = getViewConfig;
//# sourceMappingURL=index.cjs.map
