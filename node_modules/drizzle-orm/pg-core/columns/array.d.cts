import type { ColumnBuilderBaseConfig, ColumnDataType } from '../../column-builder.js';
import type { ColumnBaseConfig } from '../../column.js';
import { entityKind } from '../../entity.js';
import type { AnyPgTable } from '../table.js';
import { PgColumn, PgColumnBuilder } from './common.js';
export declare class PgArrayBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgArray'>, TBase extends ColumnBuilderBaseConfig<ColumnDataType, string>> extends PgColumnBuilder<T, {
    baseBuilder: PgColumnBuilder<TBase>;
    size: number | undefined;
}, {
    baseBuilder: PgColumnBuilder<TBase>;
}> {
    static readonly [entityKind] = "PgArrayBuilder";
    constructor(name: string, baseBuilder: PgArrayBuilder<T, TBase>['config']['baseBuilder'], size: number | undefined);
}
export declare class PgArray<T extends ColumnBaseConfig<'array', 'PgArray'>, TBase extends ColumnBuilderBaseConfig<ColumnDataType, string>> extends PgColumn<T> {
    readonly baseColumn: PgColumn;
    readonly range?: [number | undefined, number | undefined] | undefined;
    readonly size: number | undefined;
    static readonly [entityKind]: string;
    constructor(table: AnyPgTable<{
        name: T['tableName'];
    }>, config: PgArrayBuilder<T, TBase>['config'], baseColumn: PgColumn, range?: [number | undefined, number | undefined] | undefined);
    getSQLType(): string;
    mapFromDriverValue(value: unknown[] | string): T['data'];
    mapToDriverValue(value: unknown[], isNestedArray?: boolean): unknown[] | string;
}
