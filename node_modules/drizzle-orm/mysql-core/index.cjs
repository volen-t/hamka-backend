'use strict';

var index$1 = require('../index-b1dbb7ec.cjs');
var view = require('../view-e96fe3b6.cjs');
require('@opentelemetry/api');

function alias(table, alias) {
    return new Proxy(table, new index$1.TableAliasProxyHandler(alias, false));
}

var _a$3, _b$2;
class CheckBuilder {
    constructor(name, value) {
        this.name = name;
        this.value = value;
    }
    /** @internal */
    build(table) {
        return new Check(table, this);
    }
}
_a$3 = index$1.entityKind;
CheckBuilder[_a$3] = 'MySqlCheckBuilder';
class Check {
    constructor(table, builder) {
        this.table = table;
        this.name = builder.name;
        this.value = builder.value;
    }
}
_b$2 = index$1.entityKind;
Check[_b$2] = 'MySqlCheck';
function check(name, value) {
    return new CheckBuilder(name, value);
}

var _a$2, _b$1, _c;
class IndexBuilderOn {
    constructor(name, unique) {
        this.name = name;
        this.unique = unique;
    }
    on(...columns) {
        return new IndexBuilder(this.name, columns, this.unique);
    }
}
_a$2 = index$1.entityKind;
IndexBuilderOn[_a$2] = 'MySqlIndexBuilderOn';
class IndexBuilder {
    constructor(name, columns, unique) {
        this.config = {
            name,
            columns,
            unique,
        };
    }
    using(using) {
        this.config.using = using;
        return this;
    }
    algorythm(algorythm) {
        this.config.algorythm = algorythm;
        return this;
    }
    lock(lock) {
        this.config.lock = lock;
        return this;
    }
    /** @internal */
    build(table) {
        return new Index(this.config, table);
    }
}
_b$1 = index$1.entityKind;
IndexBuilder[_b$1] = 'MySqlIndexBuilder';
class Index {
    constructor(config, table) {
        this.config = { ...config, table };
    }
}
_c = index$1.entityKind;
Index[_c] = 'MySqlIndex';
function index(name) {
    return new IndexBuilderOn(name, false);
}
function uniqueIndex(name) {
    return new IndexBuilderOn(name, true);
}

var _a$1, _b;
function primaryKey(...columns) {
    return new PrimaryKeyBuilder(columns);
}
class PrimaryKeyBuilder {
    constructor(columns) {
        this.columns = columns;
    }
    /** @internal */
    build(table) {
        return new PrimaryKey(table, this.columns);
    }
}
_a$1 = index$1.entityKind;
PrimaryKeyBuilder[_a$1] = 'MySqlPrimaryKeyBuilder';
class PrimaryKey {
    constructor(table, columns) {
        this.table = table;
        this.columns = columns;
    }
    getName() {
        return `${this.table[view.MySqlTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;
    }
}
_b = index$1.entityKind;
PrimaryKey[_b] = 'MySqlPrimaryKey';

var _a;
class MySqlSchema {
    constructor(schemaName) {
        this.schemaName = schemaName;
        this.table = (name, columns, extraConfig) => {
            return view.mysqlTableWithSchema(name, columns, extraConfig, this.schemaName);
        };
        this.view = ((name, columns) => {
            return view.mysqlViewWithSchema(name, columns, this.schemaName);
        });
    }
}
_a = index$1.entityKind;
MySqlSchema[_a] = 'MySqlSchema';
/** @deprecated - use `instanceof MySqlSchema` */
function isMySqlSchema(obj) {
    return index$1.is(obj, MySqlSchema);
}
/**
 * Create a MySQL schema.
 * https://dev.mysql.com/doc/refman/8.0/en/create-database.html
 *
 * @param name mysql use schema name
 * @returns MySQL schema
 */
function mysqlDatabase(name) {
    return new MySqlSchema(name);
}
/**
 * @see mysqlDatabase
 */
const mysqlSchema = mysqlDatabase;

function getTableConfig(table) {
    const columns = Object.values(table[view.MySqlTable.Symbol.Columns]);
    const indexes = [];
    const checks = [];
    const primaryKeys = [];
    const uniqueConstraints = [];
    const foreignKeys = Object.values(table[view.MySqlTable.Symbol.InlineForeignKeys]);
    const name = table[index$1.Table.Symbol.Name];
    const schema = table[index$1.Table.Symbol.Schema];
    const baseName = table[index$1.Table.Symbol.BaseName];
    const extraConfigBuilder = table[view.MySqlTable.Symbol.ExtraConfigBuilder];
    if (extraConfigBuilder !== undefined) {
        const extraConfig = extraConfigBuilder(table[view.MySqlTable.Symbol.Columns]);
        for (const builder of Object.values(extraConfig)) {
            if (index$1.is(builder, IndexBuilder)) {
                indexes.push(builder.build(table));
            }
            else if (index$1.is(builder, CheckBuilder)) {
                checks.push(builder.build(table));
            }
            else if (index$1.is(builder, view.UniqueConstraintBuilder)) {
                uniqueConstraints.push(builder.build(table));
            }
            else if (index$1.is(builder, PrimaryKeyBuilder)) {
                primaryKeys.push(builder.build(table));
            }
            else if (index$1.is(builder, view.ForeignKeyBuilder)) {
                foreignKeys.push(builder.build(table));
            }
        }
    }
    return {
        columns,
        indexes,
        foreignKeys,
        checks,
        primaryKeys,
        uniqueConstraints,
        name,
        schema,
        baseName,
    };
}
function getViewConfig(view$1) {
    return {
        ...view$1[index$1.ViewBaseConfig],
        ...view$1[view.MySqlViewConfig],
    };
}

exports.ForeignKey = view.ForeignKey;
exports.ForeignKeyBuilder = view.ForeignKeyBuilder;
exports.InlineForeignKeys = view.InlineForeignKeys;
exports.ManualViewBuilder = view.ManualViewBuilder;
exports.MySqlBigInt53 = view.MySqlBigInt53;
exports.MySqlBigInt53Builder = view.MySqlBigInt53Builder;
exports.MySqlBigInt64 = view.MySqlBigInt64;
exports.MySqlBigInt64Builder = view.MySqlBigInt64Builder;
exports.MySqlBinary = view.MySqlBinary;
exports.MySqlBinaryBuilder = view.MySqlBinaryBuilder;
exports.MySqlBoolean = view.MySqlBoolean;
exports.MySqlBooleanBuilder = view.MySqlBooleanBuilder;
exports.MySqlChar = view.MySqlChar;
exports.MySqlCharBuilder = view.MySqlCharBuilder;
exports.MySqlColumn = view.MySqlColumn;
exports.MySqlColumnBuilder = view.MySqlColumnBuilder;
exports.MySqlColumnBuilderWithAutoIncrement = view.MySqlColumnBuilderWithAutoIncrement;
exports.MySqlColumnWithAutoIncrement = view.MySqlColumnWithAutoIncrement;
exports.MySqlCustomColumn = view.MySqlCustomColumn;
exports.MySqlCustomColumnBuilder = view.MySqlCustomColumnBuilder;
exports.MySqlDatabase = view.MySqlDatabase;
exports.MySqlDate = view.MySqlDate;
exports.MySqlDateBuilder = view.MySqlDateBuilder;
exports.MySqlDateString = view.MySqlDateString;
exports.MySqlDateStringBuilder = view.MySqlDateStringBuilder;
exports.MySqlDateTime = view.MySqlDateTime;
exports.MySqlDateTimeBuilder = view.MySqlDateTimeBuilder;
exports.MySqlDateTimeString = view.MySqlDateTimeString;
exports.MySqlDateTimeStringBuilder = view.MySqlDateTimeStringBuilder;
exports.MySqlDecimal = view.MySqlDecimal;
exports.MySqlDecimalBuilder = view.MySqlDecimalBuilder;
exports.MySqlDelete = view.MySqlDelete;
exports.MySqlDialect = view.MySqlDialect;
exports.MySqlDouble = view.MySqlDouble;
exports.MySqlDoubleBuilder = view.MySqlDoubleBuilder;
exports.MySqlEnumColumn = view.MySqlEnumColumn;
exports.MySqlEnumColumnBuilder = view.MySqlEnumColumnBuilder;
exports.MySqlFloat = view.MySqlFloat;
exports.MySqlFloatBuilder = view.MySqlFloatBuilder;
exports.MySqlInsert = view.MySqlInsert;
exports.MySqlInsertBuilder = view.MySqlInsertBuilder;
exports.MySqlInt = view.MySqlInt;
exports.MySqlIntBuilder = view.MySqlIntBuilder;
exports.MySqlJson = view.MySqlJson;
exports.MySqlJsonBuilder = view.MySqlJsonBuilder;
exports.MySqlMediumInt = view.MySqlMediumInt;
exports.MySqlMediumIntBuilder = view.MySqlMediumIntBuilder;
exports.MySqlReal = view.MySqlReal;
exports.MySqlRealBuilder = view.MySqlRealBuilder;
exports.MySqlSelect = view.MySqlSelect;
exports.MySqlSelectBuilder = view.MySqlSelectBuilder;
exports.MySqlSelectQueryBuilder = view.MySqlSelectQueryBuilder;
exports.MySqlSerial = view.MySqlSerial;
exports.MySqlSerialBuilder = view.MySqlSerialBuilder;
exports.MySqlSession = view.MySqlSession;
exports.MySqlSmallInt = view.MySqlSmallInt;
exports.MySqlSmallIntBuilder = view.MySqlSmallIntBuilder;
exports.MySqlTable = view.MySqlTable;
exports.MySqlText = view.MySqlText;
exports.MySqlTextBuilder = view.MySqlTextBuilder;
exports.MySqlTime = view.MySqlTime;
exports.MySqlTimeBuilder = view.MySqlTimeBuilder;
exports.MySqlTimestamp = view.MySqlTimestamp;
exports.MySqlTimestampBuilder = view.MySqlTimestampBuilder;
exports.MySqlTimestampString = view.MySqlTimestampString;
exports.MySqlTimestampStringBuilder = view.MySqlTimestampStringBuilder;
exports.MySqlTinyInt = view.MySqlTinyInt;
exports.MySqlTinyIntBuilder = view.MySqlTinyIntBuilder;
exports.MySqlTransaction = view.MySqlTransaction;
exports.MySqlUpdate = view.MySqlUpdate;
exports.MySqlUpdateBuilder = view.MySqlUpdateBuilder;
exports.MySqlVarBinary = view.MySqlVarBinary;
exports.MySqlVarBinaryBuilder = view.MySqlVarBinaryBuilder;
exports.MySqlVarChar = view.MySqlVarChar;
exports.MySqlVarCharBuilder = view.MySqlVarCharBuilder;
exports.MySqlView = view.MySqlView;
exports.MySqlViewBase = view.MySqlViewBase;
exports.MySqlViewConfig = view.MySqlViewConfig;
exports.MySqlYear = view.MySqlYear;
exports.MySqlYearBuilder = view.MySqlYearBuilder;
exports.PreparedQuery = view.PreparedQuery;
exports.QueryBuilder = view.QueryBuilder;
exports.UniqueConstraint = view.UniqueConstraint;
exports.UniqueConstraintBuilder = view.UniqueConstraintBuilder;
exports.UniqueOnConstraintBuilder = view.UniqueOnConstraintBuilder;
exports.ViewBuilder = view.ViewBuilder;
exports.ViewBuilderCore = view.ViewBuilderCore;
exports.bigint = view.bigint;
exports.binary = view.binary;
exports.boolean = view.boolean;
exports.char = view.char;
exports.customType = view.customType;
exports.date = view.date;
exports.datetime = view.datetime;
exports.decimal = view.decimal;
exports.double = view.double;
exports.float = view.float;
exports.foreignKey = view.foreignKey;
exports.int = view.int;
exports.json = view.json;
exports.longtext = view.longtext;
exports.mediumint = view.mediumint;
exports.mediumtext = view.mediumtext;
exports.mysqlEnum = view.mysqlEnum;
exports.mysqlTable = view.mysqlTable;
exports.mysqlTableCreator = view.mysqlTableCreator;
exports.mysqlTableWithSchema = view.mysqlTableWithSchema;
exports.mysqlView = view.mysqlView;
exports.mysqlViewWithSchema = view.mysqlViewWithSchema;
exports.real = view.real;
exports.serial = view.serial;
exports.smallint = view.smallint;
exports.text = view.text;
exports.time = view.time;
exports.timestamp = view.timestamp;
exports.tinyint = view.tinyint;
exports.tinytext = view.tinytext;
exports.unique = view.unique;
exports.uniqueKeyName = view.uniqueKeyName;
exports.varbinary = view.varbinary;
exports.varchar = view.varchar;
exports.year = view.year;
exports.Check = Check;
exports.CheckBuilder = CheckBuilder;
exports.Index = Index;
exports.IndexBuilder = IndexBuilder;
exports.IndexBuilderOn = IndexBuilderOn;
exports.MySqlSchema = MySqlSchema;
exports.PrimaryKey = PrimaryKey;
exports.PrimaryKeyBuilder = PrimaryKeyBuilder;
exports.alias = alias;
exports.check = check;
exports.getTableConfig = getTableConfig;
exports.getViewConfig = getViewConfig;
exports.index = index;
exports.isMySqlSchema = isMySqlSchema;
exports.mysqlDatabase = mysqlDatabase;
exports.mysqlSchema = mysqlSchema;
exports.primaryKey = primaryKey;
exports.uniqueIndex = uniqueIndex;
//# sourceMappingURL=index.cjs.map
