import type { GetColumnData } from '../../column.js';
import { entityKind } from '../../entity.js';
import type { MySqlDialect } from '../dialect.js';
import type { MySqlSession, PreparedQueryConfig, PreparedQueryHKTBase, QueryResultHKT, QueryResultKind } from '../session.js';
import type { MySqlTable } from '../table.js';
import { QueryPromise } from '../../query-promise.js';
import type { Query, SQL, SQLWrapper } from '../../sql/index.js';
import { type UpdateSet } from '../../utils.js';
import type { SelectedFieldsOrdered } from './select.types.js';
export interface MySqlUpdateConfig {
    where?: SQL | undefined;
    set: UpdateSet;
    table: MySqlTable;
    returning?: SelectedFieldsOrdered;
}
export type MySqlUpdateSetSource<TTable extends MySqlTable> = {
    [Key in keyof TTable['_']['columns']]?: GetColumnData<TTable['_']['columns'][Key], 'query'> | SQL;
} & {};
export declare class MySqlUpdateBuilder<TTable extends MySqlTable, TQueryResult extends QueryResultHKT, TPreparedQueryHKT extends PreparedQueryHKTBase> {
    private table;
    private session;
    private dialect;
    static readonly [entityKind]: string;
    protected $table: TTable;
    constructor(table: TTable, session: MySqlSession, dialect: MySqlDialect);
    set(values: MySqlUpdateSetSource<TTable>): MySqlUpdate<TTable, TQueryResult, TPreparedQueryHKT>;
}
export interface MySqlUpdate<TTable extends MySqlTable, TQueryResult extends QueryResultHKT, TPreparedQueryHKT extends PreparedQueryHKTBase> extends QueryPromise<QueryResultKind<TQueryResult, never>>, SQLWrapper {
}
export declare class MySqlUpdate<TTable extends MySqlTable, TQueryResult extends QueryResultHKT, TPreparedQueryHKT extends PreparedQueryHKTBase> extends QueryPromise<QueryResultKind<TQueryResult, never>> implements SQLWrapper {
    private session;
    private dialect;
    static readonly [entityKind]: string;
    protected $table: TTable;
    private config;
    constructor(table: TTable, set: UpdateSet, session: MySqlSession, dialect: MySqlDialect);
    where(where: SQL | undefined): this;
    toSQL(): {
        sql: Query['sql'];
        params: Query['params'];
    };
    prepare(): import("../../utils.js").Assume<(TPreparedQueryHKT & {
        readonly config: PreparedQueryConfig & {
            execute: QueryResultKind<TQueryResult, never>;
            iterator: never;
        };
    })["type"], import("../session.js").PreparedQuery<PreparedQueryConfig & {
        execute: QueryResultKind<TQueryResult, never>;
        iterator: never;
    }>>;
    execute: ReturnType<this['prepare']>['execute'];
    private createIterator;
    iterator: ReturnType<this["prepare"]>["iterator"];
}
