import type { ColumnBuilderBaseConfig } from '../../column-builder.js';
import type { ColumnBaseConfig } from '../../column.js';
import { entityKind } from '../../entity.js';
import { MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement } from './common.js';
export type MySqlTinyIntBuilderInitial<TName extends string> = MySqlTinyIntBuilder<{
    name: TName;
    dataType: 'number';
    columnType: 'MySqlTinyInt';
    data: number;
    driverParam: number | string;
    enumValues: undefined;
}>;
export declare class MySqlTinyIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlTinyInt'>> extends MySqlColumnBuilderWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
export declare class MySqlTinyInt<T extends ColumnBaseConfig<'number', 'MySqlTinyInt'>> extends MySqlColumnWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
    mapFromDriverValue(value: number | string): number;
}
export declare function tinyint<TName extends string>(name: TName): MySqlTinyIntBuilderInitial<TName>;
